TEST DOCUMENTATION FOR Q2TALLYVOTES
=========================
It's a synchronization program that helps people vote

USER INTERFACE TESTING
    Test if appropriate usage message is printed to screen if arguments are missing or invalid.

    TESTING
    Here is the script-fixed log of the testing performed with line numbers attached.

     1  Script started on Sun 12 Feb 2012 05:39:29 PM EST
     2  1%>linux032:~/cs343/a3/submit> ./vote -1
     3  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
     4  1%>linux032:~/cs343/a3/submit> ./vote 0
     5  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
     6  1%>linux032:~/cs343/a3/submit> ./vote 2
     7  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
     8  1%>linux032:~/cs343/a3/submit> ./vote 6 0
     9  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    10  1%>linux032:~/cs343/a3/submit> ./vote 6 -1
    11  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    12  1%>linux032:~/cs343/a3/submit> ./vote 6 2
    13  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    14  1%>linux032:~/cs343/a3/submit> ./vote 6 5
    15  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    16  1%>linux032:~/cs343/a3/submit> ./vote 6 3 -1
    17  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    18  1%>linux032:~/cs343/a3/submit> ./vote 6 3 0
    19  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    20  1%>linux032:~/cs343/a3/submit> ./vote 1.4
    21  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    22  1%>linux032:~/cs343/a3/submit> ./vote 6 1.4
    23  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    24  1%>linux032:~/cs343/a3/submit> ./vote 6 3 1.4
    25  Usage: ./vote [ Voters (> 0 & V mod G = 0, default 6) [ Group (> 0 & odd, default 3) [ Seed (> 0) ] ] ]
    26  1%>linux032:~/cs343/a3/submit> exit
    27  exit
    28  Script done on Sun 12 Feb 2012 05:41:08 PM EST

    ANALYSIS 
    Line 2 tests invalid Voters (out of range)
    Line 4 tests invalid Voters (out of range, and on the boundary 0)
    Line 6 tests invalid Voters (V mod G != 0)
    Line 8 tests invalid Group  (out of range, and on the boundary 0)
    Line 10 tests invalid Group (out of range)
    Line 12 tests invalid Group (even number)
    Line 14 tests invalid Group (V mod G != 0)
    Line 16 tests invalid Seed  (out of range)
    Line 18 tests invalid Seed  (out of range, and on the boundary 0)
    Line 20 tests invalid form of Voters (1.4, should be integer)
    Line 22 tests invalid form of Group  (1.4, should be integer)
    Line 24 tests invalid form of Seed   (1.4, should be integer)
    All tests passed since an appropriate usage message is printed to the screen.


ALGORITHM TESTING
      
  TEST 1:
  -------

    DATA DESCRIPTION
    Don't specify Seed, see whether the output generated each time is different. 

    TESTING
    Here is the script-fixed log of the testing performed with line numbers attached.
    
     1  Script started on Sun 12 Feb 2012 06:21:04 PM EST
     2  1%>linux032:~/cs343/a3/submit> ./vote 3 1 > output1
     3  1%>linux032:~/cs343/a3/submit> ./vote 3 1 > output2
     4  1%>linux032:~/cs343/a3/submit> ./vote 3 1 > output3
     5  1%>linux032:~/cs343/a3/submit> diff output1 output2
     6  4c4
     7  < V 1           
     8  ---
     9  > V 0           
    10  6,9c6
    11  < F 1   ... ... 
    12  <   V 0     
    13  <   C       
    14  < ...   F 0 ... 
    15  ---
    16  > F 0   ... ... 
    17  12a10,12
    18  >   V 1     
    19  >   C       
    20  > ...   F 1 ... 
    21  1%>linux032:~/cs343/a3/submit> diff output2 output3
    22  3,9c3
    23  < S S   S   
    24  < V 0           
    25  < C             
    26  < F 0   ... ... 
    27  <       V 0 
    28  <       C   
    29  < ...   ... F 0 
    30  ---
    31  > S S       
    32  12a7,12
    33  > V 0       S   
    34  > C             
    35  > F 0   ... ... 
    36  >       V 1 
    37  >       C   
    38  > ...   ... F 1 
    39  1%>linux032:~/cs343/a3/submit> diff output1 output3
    40  3,7c3,4
    41  < S S   S   
    42  < V 1           
    43  < C             
    44  < F 1   ... ... 
    45  <   V 0     
    46  ---
    47  > S S       
    48  >   V 1     
    49  9,10c6,10
    50  < ...   F 0 ... 
    51  <       V 0 
    52  ---
    53  > ...   F 1 ... 
    54  > V 0       S   
    55  > C             
    56  > F 0   ... ... 
    57  >       V 1 
    58  12c12
    59  < ...   ... F 0 
    60  ---
    61  > ...   ... F 1 
    62  1%>linux032:~/cs343/a3/submit> exit
    63  exit
    64  Script done on Sun 12 Feb 2012 06:21:35 PM EST
     
    ANALYSIS
    The three invocations generate different results.
    This can be shown by lines 6-20, 22-38, 40-61. 


  TEST 2:
  -------
    DATA DESCRIPTION
    Test with default Values (6) and Group (3), compare output with the output generated by given program.
    Use common seed 17844.

    TESTING
    Here is the script-fixed log of the testing performed with line numbers attached.
    
    uCondLock Version:
    
     1  Script started on Sun 12 Feb 2012 08:04:11 PM EST
     2  1%>linux024:~/cs343/a3/submit> make vote TYPE=MC
     3  make: `vote' is up to date.
     4  1%>linux024:~/cs343/a3/submit> ./vote 6 3 17844

     5  Voter0  Voter1  Voter2  Voter3  Voter4  Voter5  
     6  ======= ======= ======= ======= ======= ======= 
     7  S       S       S               
     8                  V 0             
     9                  B 1     S       S       S   
    10                                  V 0     
    11                          V 1     B 2     
    12                          C           
    13  ...     ...     ...     F 0     ...     ... 
    14                  U 1             
    15  ...     ...     F 0     ...     ...     ... 
    16                                  U 0     
    17  ...     ...     ...     ...     F 0     ... 
    18                                          V 0 
    19  V 0                                     B 1 
    20  B 2     V 0                 
    21          C                   
    22  ...     F 0     ...     ...     ...     ... 
    23                                          U 1 
    24  ...     ...     ...     ...     ...     F 0 
    25  U 0                     
    26  F 0     ...     ...     ...     ...     ... 
    27  =================
    28  All tours started

    29  1%>linux024:~/cs343/a3/submit> exit
    30  exit
       
    31  Script done on Sun 12 Feb 2012 08:04:33 PM EST  

    ANALYSIS
    -------+---------+----------------------------------------------+-------------------------------------------------------------
    Test # | Line #s | Key Point of Test                            |Analysis of Test
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        1    7-26      Information is buffered until a column is        Line 7 is flushed when "S" in Voter2 is
                       overwritten for a particular entry, which        overwritten by "V 0" in line 8. Similar behavor
                       causes the buffered data to be ï¬‚ushed            happens in other lines.
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        2    7-26       Different States are printed in correct         All "Start" state are printed with a single   
                        Format.                                         letter "S". "Vote" state are printed with a
                                                                        single letter "V" and an integer ballot value.
                                                                        Complete state is printed with a single "C" as
                                                                        expected. Block and Unblock state are printed
                                                                        with a single "B" or "U", followed by a integer
                                                                        stating number of voters who are still waiting.
                                                                        Finished state is printed with "F", and all
                                                                        other columns are printed "...". All are as expected.
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        3   9,11        Block numbers are reasonable                    Line 0 shows voter2 is blocked, so far only
            19,20                                                       voter2 is blocked, so block number is 1.
                                                                        Line 11 shows voter4 is blocked, so number of
                                                                        blocks becoms 2 (with voter2). Similar behavor
                                                                        can be observed in lines 19, 20.
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        4   14, 16      Unblock numbers are reasonable                  Line 14 shows voter2 is unblocked, while voter4
            23, 25                                                      is still waiting, hence unblock number is 1.
                                                                        Line 16 shows voter4 is unblocked, no voters are
                                                                        waiting now, so unblock number becomes 0.
                                                                        Similar behavor can be observed in lines 23, 25.
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        5   13-17,      Voting result is computed correctly             Line 13 shows 0 is the voting result, which
            22-26                                                       makes sense since voter2 and voter4 botes vote 0.
                                                                        Similar for line 15, 17, 22, 24, 26.
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        6   17,18,26    Group is formed based on voter arrival          Line 17 shows the first group is formed after
                                                                        voter4 is unblocked. Line 18 shows the next
                                                                        group starts voting after the first group is
                                                                        formed. Line 26 shows the second group is formed
                                                                        after enough voters finish voting to form a group.
                                                                        This behavor shows that voting is serialized.
    -------+---------+----------------------------------------------+-------------------------------------------------------------
        7   13, 15, 17  All voters are finished, all tours started      Lines 13, 15, 17, 22, 24, 26 show that all
            22, 24, 26                                                  voters are finished. Line 28 shows that all
            28                                                          tours started.
    -------+---------+----------------------------------------------+-------------------------------------------------------------

    uSemaphore version:
     1   Script started on Sun 12 Feb 2012 09:03:38 PM EST
     2  1%>linux024:~/cs343/a3/submit> make vote TYPE=SEM
     3  rm -f ImplType
     4  touch q2tallyVotes.h
     5  make vote TYPE="SEM"
     6  make[1]: Entering directory `/u7/y367zhang/cs343/a3/submit'
     7  echo "IMPLTYPE=SEM" > ImplType
     8  make[1]: Leaving directory `/u7/y367zhang/cs343/a3/submit'
     9  make[1]: Entering directory `/u7/y367zhang/cs343/a3/submit'
    10  make[1]: Warning: File `ImplType' has modification time 0.00018 s in the future
    11  u++                  -g -Wall -Wno-unused-label -MMD  -D"NOBUSY" -D"IMPLTYPE_SEM"   -c -o q2.o q2.cc
    12  uC++ Version 5.7.0 (single processor) (debug) (no yield) (no verify) (no profile)
    13  u++                  -g -Wall -Wno-unused-label -MMD  -D"NOBUSY" -D"IMPLTYPE_SEM"   -c -o q2tallyVotes.o q2tallyVotes.cc
    14  uC++ Version 5.7.0 (single processor) (debug) (no yield) (no verify) (no profile)
    15  q2tallyVotes.cc: In member function â€˜bool TallyVotes::vote(unsigned int, bool)â€™:
    16  q2tallyVotes.cc:163: warning: comparison between signed and unsigned integer expressions
    17  q2tallyVotes.cc:195: warning: comparison between signed and unsigned integer expressions
    18  u++                  -g -Wall -Wno-unused-label -MMD  -D"NOBUSY" -D"IMPLTYPE_SEM" q2.o q2tallyVotes.o -o vote
    19  uC++ Version 5.7.0 (single processor) (debug) (no yield) (no verify) (no profile)
    20  make[1]: warning:  Clock skew detected.  Your build may be incomplete.
    21  make[1]: Leaving directory `/u7/y367zhang/cs343/a3/submit'
    22  1%>linux024:~/cs343/a3/submit> ./vote 6 3 17844

    23   Voter0  Voter1  Voter2  Voter3  Voter4  Voter5  
    24  ======= ======= ======= ======= ======= ======= 
    25  S       S       S               
    26                  V 0             
    27                  B 1     S       S       S   
    28                                  V 0     
    29                          V 1     B 2     
    30                          C           
    31  ...     ...     ...     F 0     ...     ... 
    32                  U 1             
    33  ...     ...     F 0     ...     ...     ... 
    34                                  U 0     
    35  ...     ...     ...     ...     F 0     ... 
    36                                          V 0 
    37  V 0                                     B 1 
    38  B 2     V 0                 
    39          C                   
    40  ...     F 0     ...     ...     ...     ... 
    41                                          U 1 
    42  ...     ...     ...     ...     ...     F 0 
    43  U 0                     
    44  F 0     ...     ...     ...     ...     ... 
    45  =================
    46  All tours started

    47  1%>linux024:~/cs343/a3/submit> exit
    48  exit
       
    49  Script done on Sun 12 Feb 2012 09:06:05 PM EST  
 
    
    ANALYSIS
    Note since with the same seed, the output of uSemaphore version is the same as the output of uCondLock version.
    Hence the same analysis can apply here.

    Output of given solution:

    uCondLock version:

     1  Script started on Sun 12 Feb 2012 09:09:07 PM EST
     2  1%>linux024:~/cs343/a3/submit> ./vote_MC_64 6 3 17844   
    
     3  Voter0  Voter1  Voter2  Voter3  Voter4  Voter5  
     4  ======= ======= ======= ======= ======= ======= 
     5  S       S       S               
     6                  V 0             
     7                  B 1     S       S       S   
     8                                  V 0     
     9                          V 1     B 2     
    10                          C           
    11  ...     ...     ...     F 0     ...     ... 
    12                  U 1             
    13  ...     ...     F 0     ...     ...     ... 
    14                                  U 0     
    15  ...     ...     ...     ...     F 0     ... 
    16                                          V 0 
    17  V 0                                     B 1 
    18  B 2     V 0                 
    19          C                   
    20  ...     F 0     ...     ...     ...     ... 
    21                                          U 1 
    22  ...     ...     ...     ...     ...     F 0 
    23  U 0                     
    24  F 0     ...     ...     ...     ...     ... 
    25  =================
    26  All tours started

    27  1%>linux024:~/cs343/a3/submit> exit
    28  exit

    29  Script done on Sun 12 Feb 2012 10:06:05 PM EST  

    uSemaphore version:

     1  Script started on Sun 12 Feb 2012 09:09:07 PM EST
     2  1%>linux024:~/cs343/a3/submit> ./vote_SEM_64 6 3 17844   
    
     3  Voter0  Voter1  Voter2  Voter3  Voter4  Voter5  
     4  ======= ======= ======= ======= ======= ======= 
     5  S       S       S               
     6                  V 0             
     7                  B 1     S       S       S   
     8                                  V 0     
     9                          V 1     B 2     
    10                          C           
    11  ...     ...     ...     F 0     ...     ... 
    12                  U 1             
    13  ...     ...     F 0     ...     ...     ... 
    14                                  U 0     
    15  ...     ...     ...     ...     F 0     ... 
    16                                          V 0 
    17  V 0                                     B 1 
    18  B 2     V 0                 
    19          C                   
    20  ...     F 0     ...     ...     ...     ... 
    21                                          U 1 
    22  ...     ...     ...     ...     ...     F 0 
    23  U 0                     
    24  F 0     ...     ...     ...     ...     ... 
    25  =================
    26  All tours started

    27  1%>linux024:~/cs343/a3/submit> exit
    28  exit

    29  Script done on Sun 12 Feb 2012 10:30:05 PM EST  


    ANALYSIS
    Note that the output of given solutions both match the output of my solution.

  TEST 5:
  -------
    DATA DESCRIPTION
    Heavy test by specifying Voters 999, and group 111 to test whether the program has error.
    (e.g. deadlock, runtime error etc)

    TESTING
    Here is the script-fixed log of the testing performed with line numbers attached.

    uCondLock version:
    
     1   Script started on Sun 12 Feb 2012 09:24:31 PM EST
     2  1%>linux024:~/cs343/a3/submit> make vote TYPE=MC
     3  rm -f ImplType
     4  touch q2tallyVotes.h
     5  make vote TYPE="MC"
     6  make[1]: Entering directory `/u7/y367zhang/cs343/a3/submit'
     7  echo "IMPLTYPE=MC" > ImplType
     8  make[1]: Leaving directory `/u7/y367zhang/cs343/a3/submit'
     9  make[1]: Entering directory `/u7/y367zhang/cs343/a3/submit'
    10  u++                  -g -Wall -Wno-unused-label -MMD  -D"NOBUSY" -D"IMPLTYPE_MC"   -c -o q2.o q2.cc
    11  uC++ Version 5.7.0 (single processor) (debug) (no yield) (no verify) (no profile)
    12  u++                  -g -Wall -Wno-unused-label -MMD  -D"NOBUSY" -D"IMPLTYPE_MC"   -c -o q2tallyVotes.o q2tallyVotes.cc
    13  uC++ Version 5.7.0 (single processor) (debug) (no yield) (no verify) (no profile)
    14  u++                  -g -Wall -Wno-unused-label -MMD  -D"NOBUSY" -D"IMPLTYPE_MC" q2.o q2tallyVotes.o -o vote
    15  uC++ Version 5.7.0 (single processor) (debug) (no yield) (no verify) (no profile)
    16  make[1]: Leaving directory `/u7/y367zhang/cs343/a3/submit'
    17  1%>linux024:~/cs343/a3/submit> ./vote 999 111 17844 > myOutput 
    18  1%>linux024:~/cs343/a3/submit> exit
    19  exit
       
    20  Script done on Sun 12 Feb 2012 09:24:59 PM EST

    ANALYSIS
    Lines 17 and 18 show that no error is produced.

    uSemaphore version:
     1  Script started on Sun 12 Feb 2012 09:26:28 PM EST
     2  1%>linux024:~/cs343/a3/submit> make vote TYPE=SEM
     3  make: `vote' is up to date.
     4  1%>linux024:~/cs343/a3/submit> ./vote 999 111 17844 > myOutput 
     5  1%>linux024:~/cs343/a3/submit> exit
     6  exit
       
     7  Script done on Sun 12 Feb 2012 09:26:44 PM EST
 
    ANALYSIS
    Lines 4 and 5 show that no error is produced.

    From this we can say that each condition in the program has been exercised, and the voting synchronization has been shown to be correct.
